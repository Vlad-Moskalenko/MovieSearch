{"version":3,"file":"static/js/278.943dba75.chunk.js","mappings":"oPA+FA,UA/Ee,SAAC,GAAgB,IAAD,EAAbA,EAAa,EAAbA,OAChB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCP,EAAAA,EAAAA,UAAS,IAA7C,eAAOQ,EAAP,KAAmBC,EAAnB,KACA,GAA8BC,EAAAA,EAAAA,KAAtBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAEVC,EAAK,UAAGP,EAAaQ,IAAI,gBAApB,QAAgC,GACrCC,EAAOC,OAAOV,EAAaQ,IAAI,UAAY,GAEjDG,EAAAA,EAAAA,YAAU,WACRR,EAAcI,GAEVA,IACFD,EAAU,WAEVM,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,WAGZC,EAAAA,EAAAA,YACeT,EAAOE,GACnBQ,MAAK,YAAiC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAChBvB,EAAcsB,GACdpB,EAAgBqB,GAChBb,EAAU,UACX,IACAc,OAAM,kBAAMd,EAAU,QAAhB,KAGG,KAAVC,IACFX,EAAc,IACdE,EAAgB,GAEnB,GAAE,CAACS,EAAOE,EAAMH,IAiBjB,OACE,6BACE,SAAC,KAAD,CACEe,iBAlBmB,SAAAC,GACvBA,EAAEC,iBAEF,IAAQC,EAAUF,EAAEG,OAAOlB,MAAnBiB,MAEM,KAAVA,EAKJvB,EAAgB,CAAEM,MAAOiB,EAAOf,KAAM,IAJpCiB,IAAAA,OAAAA,QAAwB,2BAK3B,EAQKvB,cAAeA,EACfD,WAAYA,KAED,YAAXG,GAAmC,YAAXA,KACxB,SAAC,KAAD,CAAYsB,OAAQhC,EAAYF,OAAQA,IAE9B,UAAXY,IACC,SAAC,KAAD,CACEuB,MAAK,wDAAmDrB,EAAnD,SAGG,YAAXF,IAAwB,SAAC,KAAD,IACb,YAAXA,GAAwBR,EAAe,KACtC,SAAC,KAAD,CACEA,aAAcA,EACdgC,YAAapB,EACbqB,QAtBe,SAAArB,GAAI,OAAIR,GAAgB,QAAEM,MAAOA,GAAUE,GAAvC,MA2B5B,C","sources":["pages/Movies/Movies.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Notiflix from 'notiflix';\n\nimport {\n  MoviesList,\n  PagePagination,\n  SearchField,\n  NotFound,\n  Spinner,\n} from 'components';\n\nimport { movieApi } from 'services/api';\nimport { useStatus } from 'components/StatusProvider/StatusProvider';\n\nconst Movies = ({ genres }) => {\n  const [moviesList, setMoviesList] = useState([]);\n  const [totalResults, setTotalResults] = useState(0);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [queryInput, setQueryInput] = useState('');\n  const { status, setStatus } = useStatus();\n\n  const query = searchParams.get('query') ?? '';\n  const page = Number(searchParams.get('page')) || 1;\n\n  useEffect(() => {\n    setQueryInput(query);\n\n    if (query) {\n      setStatus('pending');\n\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth',\n      });\n\n      movieApi\n        .searchMovie(query, page)\n        .then(({ results, total_results }) => {\n          setMoviesList(results);\n          setTotalResults(total_results);\n          setStatus('success');\n        })\n        .catch(() => setStatus('error'));\n    }\n\n    if (query === '') {\n      setMoviesList([]);\n      setTotalResults(0);\n    }\n  }, [query, page, setStatus]);\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    const { value } = e.target.query;\n\n    if (value === '') {\n      Notiflix.Notify.failure('Search field is empty!!!');\n      return;\n    }\n\n    setSearchParams({ query: value, page: 1 });\n  };\n\n  const setQueryString = page => setSearchParams({ query: query, ...page });\n\n  return (\n    <main>\n      <SearchField\n        handleFormSubmit={handleFormSubmit}\n        setQueryInput={setQueryInput}\n        queryInput={queryInput}\n      />\n      {(status === 'success' || status === 'pending') && (\n        <MoviesList movies={moviesList} genres={genres} />\n      )}\n      {status === 'error' && (\n        <NotFound\n          title={`Oops! We couldn't find any movie with title - ${query}...`}\n        />\n      )}\n      {status === 'pending' && <Spinner />}\n      {status === 'success' && totalResults > 20 && (\n        <PagePagination\n          totalResults={totalResults}\n          currentPage={page}\n          setPage={setQueryString}\n        />\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["genres","useState","moviesList","setMoviesList","totalResults","setTotalResults","useSearchParams","searchParams","setSearchParams","queryInput","setQueryInput","useStatus","status","setStatus","query","get","page","Number","useEffect","window","scrollTo","top","behavior","movieApi","then","results","total_results","catch","handleFormSubmit","e","preventDefault","value","target","Notiflix","movies","title","currentPage","setPage"],"sourceRoot":""}