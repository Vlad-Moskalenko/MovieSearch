{"version":3,"file":"static/js/278.daf72046.chunk.js","mappings":"8PAiFA,UAjEe,SAAC,GAAgB,IAAD,EAAbA,EAAa,EAAbA,OAChB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GACrCC,EAAOC,OAAOL,EAAaG,IAAI,UAAY,EAEjD,GAAoCG,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAEA,GACEC,EAAAA,EAAAA,IAAYC,EAAAA,IADNC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,UAAWC,EAAjC,EAAiCA,MAAOC,EAAxC,EAAwCA,aAElCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRT,EAAcN,GAEVA,GACFa,GAASG,EAAAA,EAAAA,IAAe,CAAEhB,MAAAA,EAAOE,KAAAA,IAEpC,GAAE,CAACF,EAAOE,EAAMW,IAiBjB,OACE,6BACE,SAAC,KAAD,CACEI,iBAlBmB,SAAAC,GACvBA,EAAEC,iBAEF,IAAMnB,EAAQkB,EAAEE,OAAOpB,MAAMqB,MAAMC,cAAcC,OAEnC,KAAVvB,EAKJD,EAAgB,CAAEC,MAAOA,EAAOE,KAAM,IAJpCsB,IAAAA,OAAAA,QAAwB,2BAK3B,EAQKlB,cAAeA,EACfD,WAAYA,MAEXM,GAASD,KACV,iCACE,SAAC,KAAD,CAAYe,OAAQhB,EAAcb,OAAQA,IACzCgB,EAAe,KACd,SAAC,KAAD,CACEA,aAAcA,EACdc,YAAaxB,EACbyB,QAhBW,SAAAzB,GAAI,OAAIH,GAAgB,QAAEC,MAAOA,GAAUE,GAAvC,OAsBtBQ,IAAa,SAAC,KAAD,IAEbC,IACC,SAAC,KAAD,CACEiB,MAAK,wDAAmD5B,EAAnD,WAKd,C","sources":["pages/Movies/Movies.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Notiflix from 'notiflix';\n\nimport {\n  MoviesList,\n  PagePagination,\n  SearchField,\n  NotFound,\n  Spinner,\n} from 'components';\nimport { selectSearchMovies } from 'redux/selectors';\nimport { getSearchMovie } from 'redux/operations';\n\nconst Movies = ({ genres }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const page = Number(searchParams.get('page')) || 1;\n\n  const [queryInput, setQueryInput] = useState('');\n\n  const { searchMovies, isLoading, error, totalResults } =\n    useSelector(selectSearchMovies);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setQueryInput(query);\n\n    if (query) {\n      dispatch(getSearchMovie({ query, page }));\n    }\n  }, [query, page, dispatch]);\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    const query = e.target.query.value.toLowerCase().trim();\n\n    if (query === '') {\n      Notiflix.Notify.failure('Search field is empty!!!');\n      return;\n    }\n\n    setSearchParams({ query: query, page: 1 });\n  };\n\n  const setQueryString = page => setSearchParams({ query: query, ...page });\n\n  return (\n    <main>\n      <SearchField\n        handleFormSubmit={handleFormSubmit}\n        setQueryInput={setQueryInput}\n        queryInput={queryInput}\n      />\n      {(!error || isLoading) && (\n        <>\n          <MoviesList movies={searchMovies} genres={genres} />\n          {totalResults > 20 && (\n            <PagePagination\n              totalResults={totalResults}\n              currentPage={page}\n              setPage={setQueryString}\n            />\n          )}\n        </>\n      )}\n\n      {isLoading && <Spinner />}\n\n      {error && (\n        <NotFound\n          title={`Oops! We couldn't find any movie with title - ${query}...`}\n        />\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["genres","useSearchParams","searchParams","setSearchParams","query","get","page","Number","useState","queryInput","setQueryInput","useSelector","selectSearchMovies","searchMovies","isLoading","error","totalResults","dispatch","useDispatch","useEffect","getSearchMovie","handleFormSubmit","e","preventDefault","target","value","toLowerCase","trim","Notiflix","movies","currentPage","setPage","title"],"sourceRoot":""}